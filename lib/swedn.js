// Generated by CoffeeScript 1.6.1
(function() {
  var jsedn, ogcompile, ogparse, prelex,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  jsedn = require("jsedn");

  prelex = function(string) {
    var char, ci, curIndent, escaping, i, in_string, indentRE, indentedLines, j, line, lines, oldIndent, result, token, words, _i, _j, _len, _len1;
    result = "";
    lines = string.trim().split("\n");
    for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
      line = lines[i];
      if (line[0] === ";") {
        continue;
      }
      words = [];
      token = '';
      for (ci = _j = 0, _len1 = line.length; _j < _len1; ci = ++_j) {
        char = line[ci];
        if (char === '"' && (typeof escaping === "undefined" || escaping === null)) {
          if (typeof in_string !== "undefined" && in_string !== null) {
            words.push("\"" + in_string + "\"");
            in_string = void 0;
          } else {
            in_string = '';
          }
          continue;
        }
        if (in_string != null) {
          if (char === '\\' && (typeof escaping === "undefined" || escaping === null)) {
            escaping = true;
            in_string += char;
            continue;
          }
          if (escaping != null) {
            escaping = void 0;
          }
          in_string += char;
        } else if (char === ";") {
          if (token.length) {
            words.push(token);
          }
          break;
        } else if (__indexOf.call(" \t", char) >= 0) {
          if (token.length) {
            words.push(token);
          }
          token = "";
        } else {
          token += char;
        }
      }
      if (token.length) {
        words.push(token);
      }
      curIndent = line.replace(/^([ \t]*).*$/, '$1');
      if (!oldIndent) {
        oldIndent = curIndent;
      }
      if (words.length === 1) {
        indentRE = new RegExp('^' + curIndent.replace(/\t/g, '\\t') + '[ \t]');
        indentedLines = "";
        j = i + 1;
        while (j < lines.length && indentRE.test(lines[j])) {
          indentedLines += "\n" + lines[j].replace(indentRE, "");
          lines[j] = "";
          j++;
        }
        result += "" + words[0] + " " + (prelex(indentedLines)) + "\n";
      } else if (words.length === 2) {
        result += "" + words[0] + " " + words[1] + "\n";
      } else if (words.length > 1) {
        result += "" + words[0] + " [" + (words.slice(1).join(" ")) + "]\n";
      }
    }
    return "{" + result + "}";
  };

  ogparse = jsedn.parse;

  jsedn.parse = function(string) {
    return ogparse(prelex(string));
  };

  ogcompile = jsedn.compile;

  jsedn.compile = function(string) {
    return ogcompile(prelex(string));
  };

  module.exports = jsedn;

}).call(this);
